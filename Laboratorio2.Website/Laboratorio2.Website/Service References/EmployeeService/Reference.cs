//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Laboratorio2.Website.EmployeeService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EmployeeService.IEmployeeService")]
    public interface IEmployeeService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeService/GetDepartments", ReplyAction="http://tempuri.org/IEmployeeService/GetDepartmentsResponse")]
        Laboratorio2.DataAccess.EmployeeDepartment[] GetDepartments(System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate, string departmentName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeService/GetDepartments", ReplyAction="http://tempuri.org/IEmployeeService/GetDepartmentsResponse")]
        System.Threading.Tasks.Task<Laboratorio2.DataAccess.EmployeeDepartment[]> GetDepartmentsAsync(System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate, string departmentName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeService/GetEmployeesByDepartmentID", ReplyAction="http://tempuri.org/IEmployeeService/GetEmployeesByDepartmentIDResponse")]
        Laboratorio2.DataAccess.EmployeeDepartment[] GetEmployeesByDepartmentID(short departmentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeService/GetEmployeesByDepartmentID", ReplyAction="http://tempuri.org/IEmployeeService/GetEmployeesByDepartmentIDResponse")]
        System.Threading.Tasks.Task<Laboratorio2.DataAccess.EmployeeDepartment[]> GetEmployeesByDepartmentIDAsync(short departmentID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEmployeeServiceChannel : Laboratorio2.Website.EmployeeService.IEmployeeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmployeeServiceClient : System.ServiceModel.ClientBase<Laboratorio2.Website.EmployeeService.IEmployeeService>, Laboratorio2.Website.EmployeeService.IEmployeeService {
        
        public EmployeeServiceClient() {
        }
        
        public EmployeeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EmployeeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmployeeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmployeeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Laboratorio2.DataAccess.EmployeeDepartment[] GetDepartments(System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate, string departmentName) {
            return base.Channel.GetDepartments(startDate, endDate, departmentName);
        }
        
        public System.Threading.Tasks.Task<Laboratorio2.DataAccess.EmployeeDepartment[]> GetDepartmentsAsync(System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate, string departmentName) {
            return base.Channel.GetDepartmentsAsync(startDate, endDate, departmentName);
        }
        
        public Laboratorio2.DataAccess.EmployeeDepartment[] GetEmployeesByDepartmentID(short departmentID) {
            return base.Channel.GetEmployeesByDepartmentID(departmentID);
        }
        
        public System.Threading.Tasks.Task<Laboratorio2.DataAccess.EmployeeDepartment[]> GetEmployeesByDepartmentIDAsync(short departmentID) {
            return base.Channel.GetEmployeesByDepartmentIDAsync(departmentID);
        }
    }
}
